security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\LocalUser: 'auto'
        App\Service\UserPasswordReset: 'auto'

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\LocalUser
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            entry_point: form_login
            form_login:
                login_path: security_login
                check_path: security_login
            logout:
                path: security_logout
                target: security_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/version, roles: PUBLIC_ACCESS }
        - { path: ^/api/healthcheck, roles: PUBLIC_ACCESS }
        - { path: ^/media-file/update, roles: PUBLIC_ACCESS }
        - { path: ^/media-file/metadata/, roles: PUBLIC_ACCESS, methods: [HEAD] }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/sign-up, roles: PUBLIC_ACCESS }
        - { path: ^/forgotten-password, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/, roles: ROLE_USER }

when@prod:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
            App\Entity\LocalUser:
                algorithm: sodium
            App\Service\UserPasswordReset:
                algorithm: bcrypt

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
